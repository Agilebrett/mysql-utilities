Test case 1 - use the test feature
# master on localhost: ... connected.
# slave on localhost: ... connected.
# Checking for binary logging on master...
# Setting up replication...
# Testing replication setup...
# Success! Replication is running.
# ...done.
Test case 2 - show the help
Usage: mysqlreplicate.py --master=root@localhost:3306 --slave=root@localhost:3310 --server-id=3 --rpl_user=rpl:passwd 

mysqlreplicate - establish replication with a master

Options:
  --version            show program's version number and exit
  --help               
  --master=MASTER      connection information for master server in the form:
                       <user>:<password>@<host>:<port>:<socket>
  --slave=SLAVE        connection information for slave server in the form:
                       <user>:<password>@<host>:<port>:<socket>
  --rpl-user=RPL_USER  the user and password for the replication user
                       requirement - e.g. rpl:passwd - default = rpl:rpl
  -p, --pedantic       Fail if storage engines differ among master and slave.
  --test-db=TEST_DB    database name to use in testing  replication setup
                       (optional)
  -v, --verbose        Control how much information is displayed. e.g., -v =
                       verbose, -vv = more verbose, -vvv = debug
  -s, --silent         Turn off all messages for silent execution.
Test case 3 - use the verbose feature
# master on localhost: ... connected.
# slave on localhost: ... connected.
# master id = XXX
#  slave id = XXX
# Checking InnoDB statistics for type and version conflicts.
# Checking storage engines...
# Checking for binary logging on master...
# Setting up replication...
# Flushing tables on master with read lock...
# Connecting slave to master...
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = XXXX, MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POST = XXXX
# Starting slave...
# Unlocking tables on master...
# ...done.
